#!/usr/bin/env bash
set -eo pipefail; [[ $DOKKU_TRACE ]] && set -x
source "$PLUGIN_CORE_AVAILABLE_PATH/common/functions"

case "$1" in
  help | gplive:help)
    help_content_func () {
      declare desc="return help_content string"
      cat<<help_content
    gplive, returns data about all apps    
help_content
    }

    if [[ $1 = "gplive:help" ]] ; then
        echo -e 'Usage: dokku gplive'
        echo ''
        echo 'Gets all the data from an app or all apps for syncing with gplive.com'
        echo ''
        echo 'Example:'
        echo ''
        echo '$ dokku gplive'
        echo ''
    else
        help_content_func
    fi
    ;;
  
  gplive)
    gplive_main_cmd() {
      declare desc="outputs data for syncing with gplive"
      local cmd="gplive"
      local app
      local cachefiles
      local dokku_apps=$(ls -d $DOKKU_ROOT/*/ 2>/dev/null) || (dokku_log_fail "You haven't deployed any applications yet")
      local plugins=$(ls -d $PLUGIN_AVAILABLE_PATH/*/ 2>/dev/null)
      # make cach dir
      local cachedir=$DOKKU_ROOT/.gitpushcache 
      [ -d $cachedir ] || mkdir $cachedir
      # loop over apps, getting all docker options and urls asynchronously
      for dokku_app in $dokku_apps; do
        APP=$(basename $dokku_app)
        dokku docker-options $APP > $cachedir/$APP.options &
        dokku urls $APP > $cachedir/$APP.urls &
      done
      # loop over plugins - list all db's that are installed -- skipping as I'm catching this with user-auth trigger
      # for pluginpath in $plugins; do
      #   plugin=$(basename $pluginpath)
      #   case $plugin in
      #     mariadb* | redis* | couchdb* | elasticsearch* | memcached* | mongo* | mysql* | postgres* | rabbitmq* | rethinkdb*)
      #       # remove the word plugin from the end of the plugin name
      #       local dbcmd=${plugin/-plugin/}
      #       dokku $dbcmd:list > $cachedir/$dbcmd.list &
      #     ;;
      #     letsencrypt*)
      #       local dbcmd=${plugin/-plugin/}
      #       dokku $dbcmd:ls > $cachedir/$dbcmd.list &
      #     ;;   
      #   esac
      # done
      wait
      # loop over cached files, stick together to be processed by server
      cachefiles=$(ls -A $cachedir 2>/dev/null)
      for cachepath in $cachefiles; do
        #cachfile=$(basename $cachepath)
        echo "#----- $cachepath"
        echo "$(cat $cachedir/$cachepath)"
      done
    }
    gplive_main_cmd "$@"
    ;;
  *)
  
    exit $DOKKU_NOT_IMPLEMENTED_EXIT
    ;;

esac